package com.trienoir.ultimatetimesheetmaker.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDANCE".
*/
public class AttendanceDao extends AbstractDao<Attendance, Long> {

    public static final String TABLENAME = "ATTENDANCE";

    /**
     * Properties of entity Attendance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property TimeIn = new Property(2, String.class, "timeIn", false, "TIME_IN");
        public final static Property TimeOut = new Property(3, String.class, "timeOut", false, "TIME_OUT");
        public final static Property Holiday = new Property(4, String.class, "holiday", false, "HOLIDAY");
        public final static Property CreatedAt = new Property(5, java.util.Date.class, "createdAt", false, "CREATED_AT");
    }


    public AttendanceDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"TIME_IN\" TEXT," + // 2: timeIn
                "\"TIME_OUT\" TEXT," + // 3: timeOut
                "\"HOLIDAY\" TEXT," + // 4: holiday
                "\"CREATED_AT\" INTEGER);"); // 5: createdAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Attendance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String timeIn = entity.getTimeIn();
        if (timeIn != null) {
            stmt.bindString(3, timeIn);
        }
 
        String timeOut = entity.getTimeOut();
        if (timeOut != null) {
            stmt.bindString(4, timeOut);
        }
 
        String holiday = entity.getHoliday();
        if (holiday != null) {
            stmt.bindString(5, holiday);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(6, createdAt.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Attendance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String timeIn = entity.getTimeIn();
        if (timeIn != null) {
            stmt.bindString(3, timeIn);
        }
 
        String timeOut = entity.getTimeOut();
        if (timeOut != null) {
            stmt.bindString(4, timeOut);
        }
 
        String holiday = entity.getHoliday();
        if (holiday != null) {
            stmt.bindString(5, holiday);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(6, createdAt.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Attendance readEntity(Cursor cursor, int offset) {
        Attendance entity = new Attendance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // timeIn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // timeOut
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // holiday
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // createdAt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Attendance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTimeIn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeOut(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHoliday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatedAt(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Attendance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Attendance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Attendance entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
